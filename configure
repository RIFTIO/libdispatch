#!/usr/bin/env python
# encoding: utf-8

import errno
import pipes
import os
import sys
import subprocess

HERE = os.path.dirname(__file__)
SOURCE_TREE = HERE
THIRD_PARTY = os.path.join(HERE, 'thirdparty')

DEVNULL = open(os.devnull, 'wb')

sys.path.insert(1, os.path.join(THIRD_PARTY, 'click'))
import click


def shelljoin(args):
    return " ".join(pipes.quote(arg) for arg in args)


@click.command()
@click.pass_context
@click.option('--prefix', type=click.Path(), show_default=True,
              default='/usr/local')
@click.option('--cc', 'c_compiler', default='clang', metavar='COMPILER',
              envvar='CC', help='The C compiler to use')
@click.option('--c++', 'cxx_compiler', default='clang++', metavar='COMPILER',
              envvar='CXX', help='The C++ compiler to use')
@click.option('--enable-test-suite/--disable-test-suite', default=False)
@click.option('--release', 'build_type', flag_value='Release')
@click.option('--debug', 'build_type', flag_value='Debug')
@click.option('--build-type', type=click.Choice(["Debug", "Release"]),
              show_default=True, default='Release')
@click.option('-G', '--cmake-generator', default="Unix Makefiles",
              show_default=True,
              help='The CMake build system generator to use.')
@click.option('--cmake', '--cmake-executable', default='cmake',
              type=click.Path(), show_default=True)
@click.option('--with-sanitizers', 'clang_sanitizers', default='',
              envvar='DISPATCH_SANITIZE',
              help='List of Clang sanitizers to enable.')
@click.option('-n', '--dry-run', help="Don't actually invoke CMake.",
              is_flag=True)
@click.option(
    '--system-blocks-runtime', is_flag=True, default=False,
    help="Use the system-provided libBlocksRuntime instead of the one that "
    "comes with libdispatch.")
@click.option(
    '--system-kqueue', is_flag=True, default=False,
    help="Use the system-provided libkqueue instead of the one that comes "
    "with libdispatch. *Not recommended nor supported.*")
@click.option(
    '--system-pthread-workqueue', is_flag=True, default=False,
    help="Use the system-provided libBlocksRuntime instead of the one that "
    "comes with libdispatch. *Not recommended nor supported.*")
@click.argument('extra-cmake-args', nargs=-1)
def configure(
        ctx,
        prefix,
        build_type,
        c_compiler,
        cxx_compiler,
        enable_test_suite,
        cmake_generator,
        cmake_executable,
        dry_run,
        clang_sanitizers,
        system_blocks_runtime,
        system_kqueue,
        system_pthread_workqueue,
        extra_cmake_args):
    """Script for configuring libdispatch's build."""
    command_line = []
    command_line.extend([
        cmake_executable,
        SOURCE_TREE,
        '-G{0}'.format(cmake_generator),
        '-DCMAKE_BUILD_TYPE={0}'.format(build_type),
        '-DCMAKE_INSTALL_PREFIX={0}'.format(prefix),
        '-DCMAKE_C_COMPILER={0}'.format(c_compiler),
        '-DCMAKE_CXX_COMPILER={0}'.format(cxx_compiler),
        '-DCMAKE_EXPORT_COMPILE_COMMANDS=1',

        '-DDISPATCH_ENABLE_TEST_SUITE={0}'.format(int(enable_test_suite)),
        '-DDISPATCH_SANITIZE={0}'.format(clang_sanitizers),
        '-DDISPATCH_USE_PRIVATE_BLOCKSRUNTIME={0}'.format(
            int(not system_blocks_runtime)),
        '-DDISPATCH_USE_PRIVATE_PTHREAD_WORKQUEUE={0}'.format(
            int(not system_pthread_workqueue)),
        '-DDISPATCH_USE_PRIVATE_KQUEUE={0}'.format(int(not system_kqueue)),

        '--no-warn-unused-cli',
        '--warn-uninitialized',
    ])

    command_line.extend(extra_cmake_args)

    click.secho("Invoking CMake:", fg='blue', bold=True, err=True)
    click.echo(shelljoin(command_line), err=True)

    if not dry_run:
        try:
            ctx.exit(subprocess.call(command_line))
        except OSError as e:
            if e.errno == errno.ENOENT:
                ctx.fail("No such executable '{0}'".format(cmake_executable))
            else:
                ctx.fail("Could not launch executable '{0}'".format(
                    cmake_executable))


if __name__ == '__main__':
    configure(auto_envvar_prefix='DISPATCH')
